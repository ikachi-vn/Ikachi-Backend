//------------------------------------------------------------------------------
// 
//    www.codeart.vn
//    hungvq@live.com
//    (+84)908.061.119
// 
//------------------------------------------------------------------------------

using BaseBusiness;
using DTOModel;
using System;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Web.Http;
using System.Web.Http.Description;

namespace API.Controllers.V1
{

    [RoutePrefix("api/v1/AC/JournalEntry")]
    public partial class AC_JournalEntryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntry.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntry.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("AC_JournalEntry_Template.xlsx", "AC_JournalEntry.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntry.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_AC_JournalEntry")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_AC_JournalEntry.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_AC_JournalEntry.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_AC_JournalEntry.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_AC_JournalEntry.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_AC_JournalEntry result = null;
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_AC_JournalEntry.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_AC_JournalEntry", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntry, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_AC_JournalEntry.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_AC_JournalEntry.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/AC/JournalEntryRow")]
    public partial class AC_JournalEntryRowController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntryRow.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntryRow.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("AC_JournalEntryRow_Template.xlsx", "AC_JournalEntryRow.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_JournalEntryRow.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_AC_JournalEntryRow")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_AC_JournalEntryRow.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_AC_JournalEntryRow.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_AC_JournalEntryRow.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_AC_JournalEntryRow.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_AC_JournalEntryRow result = null;
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_AC_JournalEntryRow.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_AC_JournalEntryRow", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_JournalEntryRow, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_AC_JournalEntryRow.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_AC_JournalEntryRow.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/AC/PostingPeriod")]
    public partial class AC_PostingPeriodController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_PostingPeriod.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_PostingPeriod.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("AC_PostingPeriod_Template.xlsx", "AC_PostingPeriod.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_AC_PostingPeriod.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_AC_PostingPeriod")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_AC_PostingPeriod.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_AC_PostingPeriod.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_AC_PostingPeriod.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_AC_PostingPeriod.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_AC_PostingPeriod result = null;
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_AC_PostingPeriod.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_AC_PostingPeriod", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_AC_PostingPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_AC_PostingPeriod.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_AC_PostingPeriod.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BANK/IncomingPayment")]
    public partial class BANK_IncomingPaymentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPayment.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPayment.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BANK_IncomingPayment_Template.xlsx", "BANK_IncomingPayment.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPayment.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BANK_IncomingPayment")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BANK_IncomingPayment.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BANK_IncomingPayment.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BANK_IncomingPayment.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BANK_IncomingPayment.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BANK_IncomingPayment result = null;
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BANK_IncomingPayment.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BANK_IncomingPayment", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPayment, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BANK_IncomingPayment.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BANK_IncomingPayment.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BANK/IncomingPaymentDetail")]
    public partial class BANK_IncomingPaymentDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPaymentDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPaymentDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BANK_IncomingPaymentDetail_Template.xlsx", "BANK_IncomingPaymentDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_IncomingPaymentDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BANK_IncomingPaymentDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BANK_IncomingPaymentDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BANK_IncomingPaymentDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BANK_IncomingPaymentDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BANK_IncomingPaymentDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BANK_IncomingPaymentDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BANK_IncomingPaymentDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BANK_IncomingPaymentDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_IncomingPaymentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BANK_IncomingPaymentDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BANK_IncomingPaymentDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BANK/PaymentTerm")]
    public partial class BANK_PaymentTermController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_PaymentTerm.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_PaymentTerm.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BANK_PaymentTerm_Template.xlsx", "BANK_PaymentTerm.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BANK_PaymentTerm.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BANK_PaymentTerm")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BANK_PaymentTerm.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BANK_PaymentTerm.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BANK_PaymentTerm.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BANK_PaymentTerm.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BANK_PaymentTerm result = null;
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BANK_PaymentTerm.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BANK_PaymentTerm", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BANK_PaymentTerm, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BANK_PaymentTerm.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BANK_PaymentTerm.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BC/RevenueExpenditureComponent")]
    public partial class BC_RevenueExpenditureComponentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureComponent.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureComponent.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BC_RevenueExpenditureComponent_Template.xlsx", "BC_RevenueExpenditureComponent.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureComponent.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BC_RevenueExpenditureComponent")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BC_RevenueExpenditureComponent.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BC_RevenueExpenditureComponent.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BC_RevenueExpenditureComponent.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BC_RevenueExpenditureComponent.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BC_RevenueExpenditureComponent result = null;
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BC_RevenueExpenditureComponent.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BC_RevenueExpenditureComponent", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureComponent, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BC_RevenueExpenditureComponent.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BC_RevenueExpenditureComponent.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BC/RevenueExpenditureRefCode")]
    public partial class BC_RevenueExpenditureRefCodeController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureRefCode.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureRefCode.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BC_RevenueExpenditureRefCode_Template.xlsx", "BC_RevenueExpenditureRefCode.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BC_RevenueExpenditureRefCode.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BC_RevenueExpenditureRefCode")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BC_RevenueExpenditureRefCode.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BC_RevenueExpenditureRefCode.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BC_RevenueExpenditureRefCode.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BC_RevenueExpenditureRefCode.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BC_RevenueExpenditureRefCode result = null;
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BC_RevenueExpenditureRefCode.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BC_RevenueExpenditureRefCode", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BC_RevenueExpenditureRefCode, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BC_RevenueExpenditureRefCode.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BC_RevenueExpenditureRefCode.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Finance/BalanceSheetCategory")]
    public partial class BI_Finance_BalanceSheetCategoryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheetCategory.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheetCategory.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Finance_BalanceSheetCategory_Template.xlsx", "BI_Finance_BalanceSheetCategory.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheetCategory.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Finance_BalanceSheetCategory")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Finance_BalanceSheetCategory.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Finance_BalanceSheetCategory.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Finance_BalanceSheetCategory.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Finance_BalanceSheetCategory.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Finance_BalanceSheetCategory result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Finance_BalanceSheetCategory.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Finance_BalanceSheetCategory", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheetCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Finance_BalanceSheetCategory.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Finance_BalanceSheetCategory.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Finance/BalanceSheets")]
    public partial class BI_Finance_BalanceSheetsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheets.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheets.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Finance_BalanceSheets_Template.xlsx", "BI_Finance_BalanceSheets.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_BalanceSheets.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Finance_BalanceSheets")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Finance_BalanceSheets.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Finance_BalanceSheets.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Finance_BalanceSheets.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Finance_BalanceSheets.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Finance_BalanceSheets result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Finance_BalanceSheets.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Finance_BalanceSheets", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_BalanceSheets, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Finance_BalanceSheets.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Finance_BalanceSheets.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Finance/CashFlow")]
    public partial class BI_Finance_CashFlowController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_CashFlow.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_CashFlow.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Finance_CashFlow_Template.xlsx", "BI_Finance_CashFlow.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_CashFlow.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Finance_CashFlow")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Finance_CashFlow.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Finance_CashFlow.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Finance_CashFlow.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Finance_CashFlow.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Finance_CashFlow result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Finance_CashFlow.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Finance_CashFlow", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_CashFlow, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Finance_CashFlow.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Finance_CashFlow.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Finance/IncomeStatement")]
    public partial class BI_Finance_IncomeStatementController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_IncomeStatement.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_IncomeStatement.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Finance_IncomeStatement_Template.xlsx", "BI_Finance_IncomeStatement.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_IncomeStatement.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Finance_IncomeStatement")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Finance_IncomeStatement.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Finance_IncomeStatement.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Finance_IncomeStatement.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Finance_IncomeStatement.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Finance_IncomeStatement result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Finance_IncomeStatement.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Finance_IncomeStatement", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_IncomeStatement, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Finance_IncomeStatement.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Finance_IncomeStatement.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Finance/Management")]
    public partial class BI_Finance_ManagementController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_Management.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_Management.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Finance_Management_Template.xlsx", "BI_Finance_Management.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Finance_Management.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Finance_Management")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Finance_Management.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Finance_Management.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Finance_Management.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Finance_Management.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Finance_Management result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Finance_Management.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Finance_Management", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Finance_Management, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Finance_Management.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Finance_Management.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Operating/MarketResearch")]
    public partial class BI_Operating_MarketResearchController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Operating_MarketResearch.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Operating_MarketResearch.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Operating_MarketResearch_Template.xlsx", "BI_Operating_MarketResearch.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Operating_MarketResearch.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Operating_MarketResearch")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Operating_MarketResearch.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Operating_MarketResearch.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Operating_MarketResearch.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Operating_MarketResearch.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Operating_MarketResearch result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Operating_MarketResearch.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Operating_MarketResearch", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Operating_MarketResearch, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Operating_MarketResearch.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Operating_MarketResearch.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/Oppotunity")]
    public partial class BI_OppotunityController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Oppotunity.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Oppotunity.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_Oppotunity_Template.xlsx", "BI_Oppotunity.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_Oppotunity.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_Oppotunity")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_Oppotunity.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_Oppotunity.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_Oppotunity.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_Oppotunity.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_Oppotunity result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_Oppotunity.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_Oppotunity", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_Oppotunity, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_Oppotunity.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_Oppotunity.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/ReportTemplate")]
    public partial class BI_ReportTemplateController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplate.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplate.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_ReportTemplate_Template.xlsx", "BI_ReportTemplate.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplate.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_ReportTemplate")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_ReportTemplate.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_ReportTemplate.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_ReportTemplate.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_ReportTemplate.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_ReportTemplate result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_ReportTemplate.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_ReportTemplate", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_ReportTemplate.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_ReportTemplate.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BI/ReportTemplateDetail")]
    public partial class BI_ReportTemplateDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplateDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplateDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BI_ReportTemplateDetail_Template.xlsx", "BI_ReportTemplateDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BI_ReportTemplateDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BI_ReportTemplateDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BI_ReportTemplateDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BI_ReportTemplateDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BI_ReportTemplateDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BI_ReportTemplateDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BI_ReportTemplateDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BI_ReportTemplateDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BI_ReportTemplateDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BI_ReportTemplateDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BI_ReportTemplateDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BI_ReportTemplateDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BP/Partner")]
    public partial class BP_PartnerController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BP_Partner.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BP_Partner.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BP_Partner_Template.xlsx", "BP_Partner.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BP_Partner.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BP_Partner")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BP_Partner.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BP_Partner.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BP_Partner.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BP_Partner.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BP_Partner result = null;
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BP_Partner.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BP_Partner", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BP_Partner, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BP_Partner.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BP_Partner.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BRA/Branch")]
    public partial class BRA_BranchController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BRA_Branch.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BRA_Branch.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BRA_Branch_Template.xlsx", "BRA_Branch.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BRA_Branch.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BRA_Branch")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BRA_Branch.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BRA_Branch.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BRA_Branch.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BRA_Branch.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BRA_Branch result = null;
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BRA_Branch.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BRA_Branch", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BRA_Branch, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BRA_Branch.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BRA_Branch.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/BSC/RevenueTarget")]
    public partial class BSC_RevenueTargetController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BSC_RevenueTarget.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BSC_RevenueTarget.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("BSC_RevenueTarget_Template.xlsx", "BSC_RevenueTarget.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_BSC_RevenueTarget.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_BSC_RevenueTarget")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_BSC_RevenueTarget.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_BSC_RevenueTarget.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_BSC_RevenueTarget.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_BSC_RevenueTarget.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_BSC_RevenueTarget result = null;
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_BSC_RevenueTarget.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_BSC_RevenueTarget", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_BSC_RevenueTarget, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_BSC_RevenueTarget.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_BSC_RevenueTarget.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Activity")]
    public partial class CRM_ActivityController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Activity.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Activity.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Activity_Template.xlsx", "CRM_Activity.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Activity.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Activity")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Activity.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Activity.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Activity.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Activity.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Activity result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Activity.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Activity", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Activity, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Activity.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Activity.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Attendance")]
    public partial class CRM_AttendanceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Attendance.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Attendance.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Attendance_Template.xlsx", "CRM_Attendance.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Attendance.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Attendance")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Attendance.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Attendance.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Attendance.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Attendance.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Attendance result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Attendance.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Attendance", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Attendance, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Attendance.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Attendance.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/BusinessPartnerGroup")]
    public partial class CRM_BusinessPartnerGroupController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_BusinessPartnerGroup.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_BusinessPartnerGroup.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_BusinessPartnerGroup_Template.xlsx", "CRM_BusinessPartnerGroup.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_BusinessPartnerGroup.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_BusinessPartnerGroup")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_BusinessPartnerGroup.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_BusinessPartnerGroup.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_BusinessPartnerGroup.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_BusinessPartnerGroup.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_BusinessPartnerGroup result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_BusinessPartnerGroup.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_BusinessPartnerGroup", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_BusinessPartnerGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_BusinessPartnerGroup.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_BusinessPartnerGroup.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Campaign")]
    public partial class CRM_CampaignController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Campaign.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Campaign.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Campaign_Template.xlsx", "CRM_Campaign.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Campaign.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Campaign")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Campaign.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Campaign.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Campaign.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Campaign.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Campaign result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Campaign.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Campaign", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Campaign, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Campaign.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Campaign.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/CampaignMember")]
    public partial class CRM_CampaignMemberController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_CampaignMember.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_CampaignMember.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_CampaignMember_Template.xlsx", "CRM_CampaignMember.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_CampaignMember.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_CampaignMember")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_CampaignMember.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_CampaignMember.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_CampaignMember.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_CampaignMember.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_CampaignMember result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_CampaignMember.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_CampaignMember", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_CampaignMember, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_CampaignMember.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_CampaignMember.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Config")]
    public partial class CRM_ConfigController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Config.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Config.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Config_Template.xlsx", "CRM_Config.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Config.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Config")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Config.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Config.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Config.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Config.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Config result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Config.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Config", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Config.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Config.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Contact")]
    public partial class CRM_ContactController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contact.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contact.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Contact_Template.xlsx", "CRM_Contact.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contact.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Contact")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Contact.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Contact.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Contact.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Contact.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Contact result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Contact.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Contact", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contact, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Contact.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Contact.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/ContactReference")]
    public partial class CRM_ContactReferenceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_ContactReference.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_ContactReference.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_ContactReference_Template.xlsx", "CRM_ContactReference.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_ContactReference.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_ContactReference")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_ContactReference.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_ContactReference.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_ContactReference.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_ContactReference.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_ContactReference result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_ContactReference.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_ContactReference", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_ContactReference, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_ContactReference.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_ContactReference.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Contract")]
    public partial class CRM_ContractController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contract.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contract.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Contract_Template.xlsx", "CRM_Contract.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Contract.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Contract")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Contract.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Contract.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Contract.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Contract.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Contract result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Contract.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Contract", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Contract, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Contract.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Contract.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Customer")]
    public partial class CRM_CustomerController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Customer.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Customer.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Customer_Template.xlsx", "CRM_Customer.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Customer.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Customer")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Customer.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Customer.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Customer.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Customer.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Customer result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Customer.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Customer", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Customer, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Customer.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Customer.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Lead")]
    public partial class CRM_LeadController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Lead.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Lead.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Lead_Template.xlsx", "CRM_Lead.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Lead.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Lead")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Lead.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Lead.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Lead.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Lead.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Lead result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Lead.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Lead", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Lead, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Lead.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Lead.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Opportunity")]
    public partial class CRM_OpportunityController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Opportunity.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Opportunity.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Opportunity_Template.xlsx", "CRM_Opportunity.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Opportunity.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Opportunity")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Opportunity.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Opportunity.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Opportunity.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Opportunity.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Opportunity result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Opportunity.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Opportunity", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Opportunity, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Opportunity.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Opportunity.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Outlets")]
    public partial class CRM_OutletsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Outlets.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Outlets.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Outlets_Template.xlsx", "CRM_Outlets.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Outlets.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Outlets")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Outlets.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Outlets.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Outlets.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Outlets.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Outlets result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Outlets.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Outlets", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Outlets, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Outlets.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Outlets.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/PartnerAddress")]
    public partial class CRM_PartnerAddressController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerAddress.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerAddress.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_PartnerAddress_Template.xlsx", "CRM_PartnerAddress.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerAddress.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_PartnerAddress")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_PartnerAddress.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_PartnerAddress.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_PartnerAddress.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_PartnerAddress.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_PartnerAddress result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_PartnerAddress.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_PartnerAddress", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_PartnerAddress.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_PartnerAddress.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/PartnerBankAccount")]
    public partial class CRM_PartnerBankAccountController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerBankAccount.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerBankAccount.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_PartnerBankAccount_Template.xlsx", "CRM_PartnerBankAccount.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PartnerBankAccount.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_PartnerBankAccount")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_PartnerBankAccount.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_PartnerBankAccount.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_PartnerBankAccount.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_PartnerBankAccount.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_PartnerBankAccount result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_PartnerBankAccount.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_PartnerBankAccount", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PartnerBankAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_PartnerBankAccount.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_PartnerBankAccount.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/PersonInfo")]
    public partial class CRM_PersonInfoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PersonInfo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PersonInfo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_PersonInfo_Template.xlsx", "CRM_PersonInfo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_PersonInfo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_PersonInfo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_PersonInfo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_PersonInfo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_PersonInfo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_PersonInfo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_PersonInfo result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_PersonInfo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_PersonInfo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_PersonInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_PersonInfo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_PersonInfo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Quotation")]
    public partial class CRM_QuotationController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Quotation.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Quotation.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Quotation_Template.xlsx", "CRM_Quotation.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Quotation.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Quotation")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Quotation.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Quotation.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Quotation.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Quotation.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Quotation result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Quotation.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Quotation", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Quotation, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Quotation.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Quotation.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/Route")]
    public partial class CRM_RouteController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Route.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Route.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_Route_Template.xlsx", "CRM_Route.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_Route.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_Route")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_Route.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_Route.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_Route.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_Route.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_Route result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_Route.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_Route", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_Route, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_Route.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_Route.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/CRM/RouteDetail")]
    public partial class CRM_RouteDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_RouteDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_RouteDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("CRM_RouteDetail_Template.xlsx", "CRM_RouteDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_CRM_RouteDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_CRM_RouteDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_CRM_RouteDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_CRM_RouteDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_CRM_RouteDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_CRM_RouteDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_CRM_RouteDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_CRM_RouteDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_CRM_RouteDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_CRM_RouteDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_CRM_RouteDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_CRM_RouteDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/FINANCE/GeneralLedger")]
    public partial class FINANCE_GeneralLedgerController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_GeneralLedger.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_GeneralLedger.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("FINANCE_GeneralLedger_Template.xlsx", "FINANCE_GeneralLedger.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_GeneralLedger.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_FINANCE_GeneralLedger")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_FINANCE_GeneralLedger.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_FINANCE_GeneralLedger.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_FINANCE_GeneralLedger.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_FINANCE_GeneralLedger.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_FINANCE_GeneralLedger result = null;
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_FINANCE_GeneralLedger.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_FINANCE_GeneralLedger", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_GeneralLedger, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_FINANCE_GeneralLedger.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_FINANCE_GeneralLedger.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/FINANCE/TaxDefinition")]
    public partial class FINANCE_TaxDefinitionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_TaxDefinition.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_TaxDefinition.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("FINANCE_TaxDefinition_Template.xlsx", "FINANCE_TaxDefinition.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_FINANCE_TaxDefinition.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_FINANCE_TaxDefinition")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_FINANCE_TaxDefinition.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_FINANCE_TaxDefinition.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_FINANCE_TaxDefinition.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_FINANCE_TaxDefinition.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_FINANCE_TaxDefinition result = null;
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_FINANCE_TaxDefinition.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_FINANCE_TaxDefinition", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_FINANCE_TaxDefinition, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_FINANCE_TaxDefinition.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_FINANCE_TaxDefinition.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/DeductionOnSalary")]
    public partial class HRM_DeductionOnSalaryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_DeductionOnSalary.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_DeductionOnSalary.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_DeductionOnSalary_Template.xlsx", "HRM_DeductionOnSalary.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_DeductionOnSalary.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_DeductionOnSalary")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_DeductionOnSalary.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_DeductionOnSalary.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_DeductionOnSalary.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_DeductionOnSalary.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_DeductionOnSalary result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_DeductionOnSalary.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_DeductionOnSalary", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_DeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_DeductionOnSalary.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_DeductionOnSalary.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PayrollElement")]
    public partial class HRM_PayrollElementController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollElement.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollElement.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PayrollElement_Template.xlsx", "HRM_PayrollElement.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollElement.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PayrollElement")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PayrollElement.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PayrollElement.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PayrollElement.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PayrollElement.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PayrollElement result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PayrollElement.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PayrollElement", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollElement, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PayrollElement.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PayrollElement.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PayrollPaySheetMaster")]
    public partial class HRM_PayrollPaySheetMasterController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMaster.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMaster.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PayrollPaySheetMaster_Template.xlsx", "HRM_PayrollPaySheetMaster.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMaster.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PayrollPaySheetMaster")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PayrollPaySheetMaster.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PayrollPaySheetMaster.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PayrollPaySheetMaster.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PayrollPaySheetMaster.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PayrollPaySheetMaster result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PayrollPaySheetMaster.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PayrollPaySheetMaster", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMaster, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PayrollPaySheetMaster.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PayrollPaySheetMaster.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PayrollPaySheetMasterSalaryDecision")]
    public partial class HRM_PayrollPaySheetMasterSalaryDecisionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMasterSalaryDecision.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMasterSalaryDecision.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PayrollPaySheetMasterSalaryDecision_Template.xlsx", "HRM_PayrollPaySheetMasterSalaryDecision.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PayrollPaySheetMasterSalaryDecision.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PayrollPaySheetMasterSalaryDecision")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PayrollPaySheetMasterSalaryDecision.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PayrollPaySheetMasterSalaryDecision.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PayrollPaySheetMasterSalaryDecision.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PayrollPaySheetMasterSalaryDecision.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PayrollPaySheetMasterSalaryDecision result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PayrollPaySheetMasterSalaryDecision.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PayrollPaySheetMasterSalaryDecision", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PayrollPaySheetMasterSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PayrollPaySheetMasterSalaryDecision.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PayrollPaySheetMasterSalaryDecision.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PersonalIncomePaymentProcess")]
    public partial class HRM_PersonalIncomePaymentProcessController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PersonalIncomePaymentProcess.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PersonalIncomePaymentProcess.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PersonalIncomePaymentProcess_Template.xlsx", "HRM_PersonalIncomePaymentProcess.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PersonalIncomePaymentProcess.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PersonalIncomePaymentProcess")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PersonalIncomePaymentProcess.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PersonalIncomePaymentProcess.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PersonalIncomePaymentProcess.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PersonalIncomePaymentProcess.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PersonalIncomePaymentProcess result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PersonalIncomePaymentProcess.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PersonalIncomePaymentProcess", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PersonalIncomePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PersonalIncomePaymentProcess.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PersonalIncomePaymentProcess.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolAllowance")]
    public partial class HRM_PolAllowanceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowance.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowance.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolAllowance_Template.xlsx", "HRM_PolAllowance.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowance.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolAllowance")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolAllowance.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolAllowance.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolAllowance.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolAllowance.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolAllowance result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolAllowance.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolAllowance", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolAllowance.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolAllowance.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolAllowanceApplyFor")]
    public partial class HRM_PolAllowanceApplyForController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowanceApplyFor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowanceApplyFor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolAllowanceApplyFor_Template.xlsx", "HRM_PolAllowanceApplyFor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolAllowanceApplyFor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolAllowanceApplyFor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolAllowanceApplyFor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolAllowanceApplyFor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolAllowanceApplyFor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolAllowanceApplyFor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolAllowanceApplyFor result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolAllowanceApplyFor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolAllowanceApplyFor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolAllowanceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolAllowanceApplyFor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolAllowanceApplyFor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolCompulsoryInsurance")]
    public partial class HRM_PolCompulsoryInsuranceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsurance.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsurance.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolCompulsoryInsurance_Template.xlsx", "HRM_PolCompulsoryInsurance.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsurance.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolCompulsoryInsurance")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolCompulsoryInsurance.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolCompulsoryInsurance.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolCompulsoryInsurance.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolCompulsoryInsurance.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolCompulsoryInsurance result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolCompulsoryInsurance.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolCompulsoryInsurance", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolCompulsoryInsurance.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolCompulsoryInsurance.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolCompulsoryInsuranceApplyFor")]
    public partial class HRM_PolCompulsoryInsuranceApplyForController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsuranceApplyFor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsuranceApplyFor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolCompulsoryInsuranceApplyFor_Template.xlsx", "HRM_PolCompulsoryInsuranceApplyFor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolCompulsoryInsuranceApplyFor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolCompulsoryInsuranceApplyFor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolCompulsoryInsuranceApplyFor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolCompulsoryInsuranceApplyFor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolCompulsoryInsuranceApplyFor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolCompulsoryInsuranceApplyFor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolCompulsoryInsuranceApplyFor result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolCompulsoryInsuranceApplyFor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolCompulsoryInsuranceApplyFor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolCompulsoryInsuranceApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolCompulsoryInsuranceApplyFor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolCompulsoryInsuranceApplyFor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolicyHoliday")]
    public partial class HRM_PolicyHolidayController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyHoliday.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyHoliday.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolicyHoliday_Template.xlsx", "HRM_PolicyHoliday.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyHoliday.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolicyHoliday")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolicyHoliday.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolicyHoliday.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolicyHoliday.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolicyHoliday.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolicyHoliday result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolicyHoliday.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolicyHoliday", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyHoliday, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolicyHoliday.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolicyHoliday.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolicyPaidTimeOff")]
    public partial class HRM_PolicyPaidTimeOffController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOff.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOff.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolicyPaidTimeOff_Template.xlsx", "HRM_PolicyPaidTimeOff.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOff.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolicyPaidTimeOff")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOff.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolicyPaidTimeOff.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolicyPaidTimeOff.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolicyPaidTimeOff.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolicyPaidTimeOff result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolicyPaidTimeOff.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolicyPaidTimeOff", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOff, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOff.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolicyPaidTimeOff.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolicyPaidTimeOffGrantsByLengthOfServices")]
    public partial class HRM_PolicyPaidTimeOffGrantsByLengthOfServicesController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolicyPaidTimeOffGrantsByLengthOfServices_Template.xlsx", "HRM_PolicyPaidTimeOffGrantsByLengthOfServices.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolicyPaidTimeOffGrantsByLengthOfServices")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolicyPaidTimeOffGrantsByLengthOfServices result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolicyPaidTimeOffGrantsByLengthOfServices", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolicyPaidTimeOffGrantsByLengthOfServices.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolWelfare")]
    public partial class HRM_PolWelfareController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfare.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfare.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolWelfare_Template.xlsx", "HRM_PolWelfare.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfare.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolWelfare")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolWelfare.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolWelfare.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolWelfare.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolWelfare.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolWelfare result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolWelfare.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolWelfare", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolWelfare.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolWelfare.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/PolWelfareApplyFor")]
    public partial class HRM_PolWelfareApplyForController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfareApplyFor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfareApplyFor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_PolWelfareApplyFor_Template.xlsx", "HRM_PolWelfareApplyFor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_PolWelfareApplyFor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_PolWelfareApplyFor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_PolWelfareApplyFor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_PolWelfareApplyFor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_PolWelfareApplyFor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_PolWelfareApplyFor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_PolWelfareApplyFor result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_PolWelfareApplyFor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_PolWelfareApplyFor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_PolWelfareApplyFor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_PolWelfareApplyFor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_PolWelfareApplyFor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/Shift")]
    public partial class HRM_ShiftController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Shift.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Shift.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_Shift_Template.xlsx", "HRM_Shift.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Shift.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_Shift")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_Shift.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_Shift.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_Shift.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_Shift.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_Shift result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_Shift.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_Shift", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Shift, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_Shift.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_Shift.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/Staff")]
    public partial class HRM_StaffController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_Staff_Template.xlsx", "HRM_Staff.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_Staff")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_Staff.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_Staff.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_Staff.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_Staff.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_Staff result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_Staff.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_Staff", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_Staff.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_Staff.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/Staff/ConcurrentPosition")]
    public partial class HRM_Staff_ConcurrentPositionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff_ConcurrentPosition.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff_ConcurrentPosition.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_Staff_ConcurrentPosition_Template.xlsx", "HRM_Staff_ConcurrentPosition.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_Staff_ConcurrentPosition.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_Staff_ConcurrentPosition")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_Staff_ConcurrentPosition.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_Staff_ConcurrentPosition.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_Staff_ConcurrentPosition.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_Staff_ConcurrentPosition.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_Staff_ConcurrentPosition result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_Staff_ConcurrentPosition.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_Staff_ConcurrentPosition", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_Staff_ConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_Staff_ConcurrentPosition.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_Staff_ConcurrentPosition.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffAcademicLevel")]
    public partial class HRM_StaffAcademicLevelController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAcademicLevel.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAcademicLevel.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffAcademicLevel_Template.xlsx", "HRM_StaffAcademicLevel.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAcademicLevel.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffAcademicLevel")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffAcademicLevel.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffAcademicLevel.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffAcademicLevel.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffAcademicLevel.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffAcademicLevel result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffAcademicLevel.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffAcademicLevel", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAcademicLevel, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffAcademicLevel.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffAcademicLevel.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffAddress")]
    public partial class HRM_StaffAddressController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAddress.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAddress.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffAddress_Template.xlsx", "HRM_StaffAddress.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAddress.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffAddress")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffAddress.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffAddress.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffAddress.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffAddress.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffAddress result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffAddress.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffAddress", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAddress, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffAddress.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffAddress.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffAllowance")]
    public partial class HRM_StaffAllowanceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAllowance.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAllowance.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffAllowance_Template.xlsx", "HRM_StaffAllowance.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAllowance.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffAllowance")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffAllowance.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffAllowance.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffAllowance.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffAllowance.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffAllowance result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffAllowance.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffAllowance", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAllowance, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffAllowance.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffAllowance.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffAnotherSkill")]
    public partial class HRM_StaffAnotherSkillController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAnotherSkill.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAnotherSkill.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffAnotherSkill_Template.xlsx", "HRM_StaffAnotherSkill.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAnotherSkill.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffAnotherSkill")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffAnotherSkill.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffAnotherSkill.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffAnotherSkill.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffAnotherSkill.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffAnotherSkill result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffAnotherSkill.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffAnotherSkill", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAnotherSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffAnotherSkill.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffAnotherSkill.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffAppointDecision")]
    public partial class HRM_StaffAppointDecisionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAppointDecision.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAppointDecision.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffAppointDecision_Template.xlsx", "HRM_StaffAppointDecision.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffAppointDecision.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffAppointDecision")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffAppointDecision.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffAppointDecision.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffAppointDecision.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffAppointDecision.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffAppointDecision result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffAppointDecision.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffAppointDecision", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffAppointDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffAppointDecision.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffAppointDecision.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffBank")]
    public partial class HRM_StaffBankController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBank.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBank.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffBank_Template.xlsx", "HRM_StaffBank.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBank.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffBank")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffBank.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffBank.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffBank.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffBank.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffBank result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffBank.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffBank", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBank, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffBank.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffBank.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffBasicInfo")]
    public partial class HRM_StaffBasicInfoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBasicInfo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBasicInfo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffBasicInfo_Template.xlsx", "HRM_StaffBasicInfo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBasicInfo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffBasicInfo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffBasicInfo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffBasicInfo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffBasicInfo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffBasicInfo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffBasicInfo result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffBasicInfo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffBasicInfo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBasicInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffBasicInfo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffBasicInfo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffBounusOnSalary")]
    public partial class HRM_StaffBounusOnSalaryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBounusOnSalary.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBounusOnSalary.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffBounusOnSalary_Template.xlsx", "HRM_StaffBounusOnSalary.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffBounusOnSalary.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffBounusOnSalary")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffBounusOnSalary.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffBounusOnSalary.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffBounusOnSalary.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffBounusOnSalary.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffBounusOnSalary result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffBounusOnSalary.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffBounusOnSalary", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffBounusOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffBounusOnSalary.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffBounusOnSalary.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffCompulsoryInsurance")]
    public partial class HRM_StaffCompulsoryInsuranceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCompulsoryInsurance.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCompulsoryInsurance.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffCompulsoryInsurance_Template.xlsx", "HRM_StaffCompulsoryInsurance.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCompulsoryInsurance.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffCompulsoryInsurance")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffCompulsoryInsurance.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffCompulsoryInsurance.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffCompulsoryInsurance.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffCompulsoryInsurance.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffCompulsoryInsurance result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffCompulsoryInsurance.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffCompulsoryInsurance", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCompulsoryInsurance, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffCompulsoryInsurance.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffCompulsoryInsurance.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffConcurrentPosition")]
    public partial class HRM_StaffConcurrentPositionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentPosition.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentPosition.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffConcurrentPosition_Template.xlsx", "HRM_StaffConcurrentPosition.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentPosition.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffConcurrentPosition")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffConcurrentPosition.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffConcurrentPosition.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffConcurrentPosition.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffConcurrentPosition.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffConcurrentPosition result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffConcurrentPosition.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffConcurrentPosition", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffConcurrentPosition.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffConcurrentPosition.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffConcurrentProbationryPosition")]
    public partial class HRM_StaffConcurrentProbationryPositionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentProbationryPosition.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentProbationryPosition.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffConcurrentProbationryPosition_Template.xlsx", "HRM_StaffConcurrentProbationryPosition.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffConcurrentProbationryPosition.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffConcurrentProbationryPosition")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffConcurrentProbationryPosition.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffConcurrentProbationryPosition.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffConcurrentProbationryPosition.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffConcurrentProbationryPosition.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffConcurrentProbationryPosition result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffConcurrentProbationryPosition.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffConcurrentProbationryPosition", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffConcurrentProbationryPosition, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffConcurrentProbationryPosition.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffConcurrentProbationryPosition.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffCurrentWorking")]
    public partial class HRM_StaffCurrentWorkingController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCurrentWorking.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCurrentWorking.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffCurrentWorking_Template.xlsx", "HRM_StaffCurrentWorking.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffCurrentWorking.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffCurrentWorking")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffCurrentWorking.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffCurrentWorking.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffCurrentWorking.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffCurrentWorking.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffCurrentWorking result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffCurrentWorking.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffCurrentWorking", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffCurrentWorking, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffCurrentWorking.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffCurrentWorking.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffDeductionOnSalary")]
    public partial class HRM_StaffDeductionOnSalaryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffDeductionOnSalary.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffDeductionOnSalary.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffDeductionOnSalary_Template.xlsx", "HRM_StaffDeductionOnSalary.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffDeductionOnSalary.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffDeductionOnSalary")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffDeductionOnSalary.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffDeductionOnSalary.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffDeductionOnSalary.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffDeductionOnSalary.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffDeductionOnSalary result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffDeductionOnSalary.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffDeductionOnSalary", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffDeductionOnSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffDeductionOnSalary.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffDeductionOnSalary.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffFamily")]
    public partial class HRM_StaffFamilyController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffFamily.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffFamily.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffFamily_Template.xlsx", "HRM_StaffFamily.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffFamily.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffFamily")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffFamily.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffFamily.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffFamily.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffFamily.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffFamily result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffFamily.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffFamily", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffFamily, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffFamily.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffFamily.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffForeignLanguage")]
    public partial class HRM_StaffForeignLanguageController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffForeignLanguage.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffForeignLanguage.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffForeignLanguage_Template.xlsx", "HRM_StaffForeignLanguage.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffForeignLanguage.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffForeignLanguage")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffForeignLanguage.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffForeignLanguage.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffForeignLanguage.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffForeignLanguage.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffForeignLanguage result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffForeignLanguage.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffForeignLanguage", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffForeignLanguage, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffForeignLanguage.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffForeignLanguage.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffIdentityCardAndPIT")]
    public partial class HRM_StaffIdentityCardAndPITController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffIdentityCardAndPIT.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffIdentityCardAndPIT.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffIdentityCardAndPIT_Template.xlsx", "HRM_StaffIdentityCardAndPIT.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffIdentityCardAndPIT.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffIdentityCardAndPIT")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffIdentityCardAndPIT.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffIdentityCardAndPIT.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffIdentityCardAndPIT.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffIdentityCardAndPIT.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffIdentityCardAndPIT result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffIdentityCardAndPIT.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffIdentityCardAndPIT", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffIdentityCardAndPIT, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffIdentityCardAndPIT.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffIdentityCardAndPIT.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffInsurancePaymentProcess")]
    public partial class HRM_StaffInsurancePaymentProcessController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInsurancePaymentProcess.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInsurancePaymentProcess.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffInsurancePaymentProcess_Template.xlsx", "HRM_StaffInsurancePaymentProcess.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInsurancePaymentProcess.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffInsurancePaymentProcess")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffInsurancePaymentProcess.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffInsurancePaymentProcess.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffInsurancePaymentProcess.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffInsurancePaymentProcess.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffInsurancePaymentProcess result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffInsurancePaymentProcess.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffInsurancePaymentProcess", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInsurancePaymentProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffInsurancePaymentProcess.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffInsurancePaymentProcess.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffInternetAccount")]
    public partial class HRM_StaffInternetAccountController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInternetAccount.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInternetAccount.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffInternetAccount_Template.xlsx", "HRM_StaffInternetAccount.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffInternetAccount.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffInternetAccount")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffInternetAccount.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffInternetAccount.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffInternetAccount.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffInternetAccount.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffInternetAccount result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffInternetAccount.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffInternetAccount", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffInternetAccount, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffInternetAccount.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffInternetAccount.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffLaborContract")]
    public partial class HRM_StaffLaborContractController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLaborContract.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLaborContract.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffLaborContract_Template.xlsx", "HRM_StaffLaborContract.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLaborContract.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffLaborContract")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffLaborContract.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffLaborContract.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffLaborContract.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffLaborContract.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffLaborContract result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffLaborContract.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffLaborContract", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLaborContract, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffLaborContract.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffLaborContract.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffLearningProcess")]
    public partial class HRM_StaffLearningProcessController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLearningProcess.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLearningProcess.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffLearningProcess_Template.xlsx", "HRM_StaffLearningProcess.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffLearningProcess.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffLearningProcess")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffLearningProcess.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffLearningProcess.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffLearningProcess.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffLearningProcess.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffLearningProcess result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffLearningProcess.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffLearningProcess", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffLearningProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffLearningProcess.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffLearningProcess.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffPhone")]
    public partial class HRM_StaffPhoneController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPhone.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPhone.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffPhone_Template.xlsx", "HRM_StaffPhone.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPhone.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffPhone")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffPhone.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffPhone.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffPhone.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffPhone.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffPhone result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffPhone.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffPhone", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPhone, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffPhone.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffPhone.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffPTOEnrollment")]
    public partial class HRM_StaffPTOEnrollmentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPTOEnrollment.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPTOEnrollment.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffPTOEnrollment_Template.xlsx", "HRM_StaffPTOEnrollment.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffPTOEnrollment.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffPTOEnrollment")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffPTOEnrollment.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffPTOEnrollment.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffPTOEnrollment.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffPTOEnrollment.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffPTOEnrollment result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffPTOEnrollment.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffPTOEnrollment", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffPTOEnrollment, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffPTOEnrollment.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffPTOEnrollment.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffRecruitmentInfo")]
    public partial class HRM_StaffRecruitmentInfoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffRecruitmentInfo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffRecruitmentInfo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffRecruitmentInfo_Template.xlsx", "HRM_StaffRecruitmentInfo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffRecruitmentInfo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffRecruitmentInfo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffRecruitmentInfo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffRecruitmentInfo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffRecruitmentInfo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffRecruitmentInfo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffRecruitmentInfo result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffRecruitmentInfo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffRecruitmentInfo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffRecruitmentInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffRecruitmentInfo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffRecruitmentInfo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffResignationInfo")]
    public partial class HRM_StaffResignationInfoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffResignationInfo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffResignationInfo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffResignationInfo_Template.xlsx", "HRM_StaffResignationInfo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffResignationInfo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffResignationInfo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffResignationInfo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffResignationInfo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffResignationInfo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffResignationInfo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffResignationInfo result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffResignationInfo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffResignationInfo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffResignationInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffResignationInfo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffResignationInfo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffSalaryDecision")]
    public partial class HRM_StaffSalaryDecisionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSalaryDecision.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSalaryDecision.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffSalaryDecision_Template.xlsx", "HRM_StaffSalaryDecision.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSalaryDecision.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffSalaryDecision")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffSalaryDecision.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffSalaryDecision.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffSalaryDecision.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffSalaryDecision.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffSalaryDecision result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffSalaryDecision.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffSalaryDecision", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSalaryDecision, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffSalaryDecision.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffSalaryDecision.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffSpecializedField")]
    public partial class HRM_StaffSpecializedFieldController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedField.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedField.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffSpecializedField_Template.xlsx", "HRM_StaffSpecializedField.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedField.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffSpecializedField")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffSpecializedField.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffSpecializedField.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffSpecializedField.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffSpecializedField.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffSpecializedField result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffSpecializedField.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffSpecializedField", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedField, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffSpecializedField.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffSpecializedField.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffSpecializedSkill")]
    public partial class HRM_StaffSpecializedSkillController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedSkill.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedSkill.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffSpecializedSkill_Template.xlsx", "HRM_StaffSpecializedSkill.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffSpecializedSkill.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffSpecializedSkill")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffSpecializedSkill.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffSpecializedSkill.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffSpecializedSkill.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffSpecializedSkill.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffSpecializedSkill result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffSpecializedSkill.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffSpecializedSkill", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffSpecializedSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffSpecializedSkill.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffSpecializedSkill.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffStaffAndFamilyJob")]
    public partial class HRM_StaffStaffAndFamilyJobController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffStaffAndFamilyJob.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffStaffAndFamilyJob.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffStaffAndFamilyJob_Template.xlsx", "HRM_StaffStaffAndFamilyJob.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffStaffAndFamilyJob.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffStaffAndFamilyJob")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffStaffAndFamilyJob.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffStaffAndFamilyJob.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffStaffAndFamilyJob.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffStaffAndFamilyJob.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffStaffAndFamilyJob result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffStaffAndFamilyJob.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffStaffAndFamilyJob", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffStaffAndFamilyJob, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffStaffAndFamilyJob.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffStaffAndFamilyJob.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffTrainingProcess")]
    public partial class HRM_StaffTrainingProcessController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcess.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcess.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffTrainingProcess_Template.xlsx", "HRM_StaffTrainingProcess.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcess.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffTrainingProcess")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffTrainingProcess.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffTrainingProcess.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffTrainingProcess.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffTrainingProcess.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffTrainingProcess result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffTrainingProcess.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffTrainingProcess", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcess, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffTrainingProcess.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffTrainingProcess.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffTrainingProcessSkill")]
    public partial class HRM_StaffTrainingProcessSkillController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcessSkill.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcessSkill.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffTrainingProcessSkill_Template.xlsx", "HRM_StaffTrainingProcessSkill.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffTrainingProcessSkill.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffTrainingProcessSkill")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffTrainingProcessSkill.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffTrainingProcessSkill.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffTrainingProcessSkill.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffTrainingProcessSkill.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffTrainingProcessSkill result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffTrainingProcessSkill.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffTrainingProcessSkill", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffTrainingProcessSkill, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffTrainingProcessSkill.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffTrainingProcessSkill.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffWelfare")]
    public partial class HRM_StaffWelfareController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWelfare.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWelfare.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffWelfare_Template.xlsx", "HRM_StaffWelfare.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWelfare.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffWelfare")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffWelfare.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffWelfare.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffWelfare.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffWelfare.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffWelfare result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffWelfare.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffWelfare", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWelfare, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffWelfare.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffWelfare.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffWorkExperience")]
    public partial class HRM_StaffWorkExperienceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkExperience.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkExperience.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffWorkExperience_Template.xlsx", "HRM_StaffWorkExperience.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkExperience.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffWorkExperience")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffWorkExperience.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffWorkExperience.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffWorkExperience.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffWorkExperience.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffWorkExperience result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffWorkExperience.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffWorkExperience", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkExperience, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffWorkExperience.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffWorkExperience.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/StaffWorkingDiary")]
    public partial class HRM_StaffWorkingDiaryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkingDiary.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkingDiary.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_StaffWorkingDiary_Template.xlsx", "HRM_StaffWorkingDiary.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_StaffWorkingDiary.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_StaffWorkingDiary")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_StaffWorkingDiary.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_StaffWorkingDiary.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_StaffWorkingDiary.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_StaffWorkingDiary.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_StaffWorkingDiary result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_StaffWorkingDiary.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_StaffWorkingDiary", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_StaffWorkingDiary, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_StaffWorkingDiary.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_StaffWorkingDiary.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/TimeSheetCheckInCode")]
    public partial class HRM_TimeSheetCheckInCodeController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetCheckInCode.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetCheckInCode.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_TimeSheetCheckInCode_Template.xlsx", "HRM_TimeSheetCheckInCode.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetCheckInCode.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_TimeSheetCheckInCode")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_TimeSheetCheckInCode.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_TimeSheetCheckInCode.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_TimeSheetCheckInCode.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_TimeSheetCheckInCode.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_TimeSheetCheckInCode result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_TimeSheetCheckInCode.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_TimeSheetCheckInCode", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetCheckInCode, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_TimeSheetCheckInCode.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_TimeSheetCheckInCode.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/HRM/TimeSheetLog")]
    public partial class HRM_TimeSheetLogController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetLog.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetLog.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("HRM_TimeSheetLog_Template.xlsx", "HRM_TimeSheetLog.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_HRM_TimeSheetLog.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_HRM_TimeSheetLog")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_HRM_TimeSheetLog.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_HRM_TimeSheetLog.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_HRM_TimeSheetLog.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_HRM_TimeSheetLog.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_HRM_TimeSheetLog result = null;
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_HRM_TimeSheetLog.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_HRM_TimeSheetLog", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_HRM_TimeSheetLog, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_HRM_TimeSheetLog.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_HRM_TimeSheetLog.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/ContractTemplate")]
    public partial class LIST_ContractTemplateController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ContractTemplate.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ContractTemplate.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_ContractTemplate_Template.xlsx", "LIST_ContractTemplate.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ContractTemplate.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_ContractTemplate")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_ContractTemplate.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_ContractTemplate.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_ContractTemplate.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_ContractTemplate.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_ContractTemplate result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_ContractTemplate.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_ContractTemplate", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_ContractTemplate, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_ContractTemplate.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_ContractTemplate.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/Country")]
    public partial class LIST_CountryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Country.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Country.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_Country_Template.xlsx", "LIST_Country.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Country.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_Country")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_Country.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_Country.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_Country.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_Country.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_Country result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_Country.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_Country", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Country, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_Country.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_Country.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/District")]
    public partial class LIST_DistrictController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_District.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_District.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_District_Template.xlsx", "LIST_District.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_District.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_District")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_District.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_District.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_District.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_District.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_District result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_District.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_District", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_District, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_District.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_District.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/ElementOfSalary")]
    public partial class LIST_ElementOfSalaryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ElementOfSalary.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ElementOfSalary.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_ElementOfSalary_Template.xlsx", "LIST_ElementOfSalary.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_ElementOfSalary.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_ElementOfSalary")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_ElementOfSalary.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_ElementOfSalary.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_ElementOfSalary.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_ElementOfSalary.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_ElementOfSalary result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_ElementOfSalary.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_ElementOfSalary", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_ElementOfSalary, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_ElementOfSalary.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_ElementOfSalary.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/General")]
    public partial class LIST_GeneralController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_General.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_General.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_General_Template.xlsx", "LIST_General.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_General.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_General")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_General.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_General.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_General.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_General.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_General result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_General.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_General", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_General, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_General.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_General.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/PayPeriod")]
    public partial class LIST_PayPeriodController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_PayPeriod.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_PayPeriod.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_PayPeriod_Template.xlsx", "LIST_PayPeriod.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_PayPeriod.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_PayPeriod")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_PayPeriod.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_PayPeriod.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_PayPeriod.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_PayPeriod.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_PayPeriod result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_PayPeriod.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_PayPeriod", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_PayPeriod, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_PayPeriod.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_PayPeriod.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/Province")]
    public partial class LIST_ProvinceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Province.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Province.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_Province_Template.xlsx", "LIST_Province.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Province.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_Province")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_Province.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_Province.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_Province.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_Province.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_Province result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_Province.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_Province", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Province, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_Province.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_Province.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/LIST/Ward")]
    public partial class LIST_WardController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Ward.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Ward.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("LIST_Ward_Template.xlsx", "LIST_Ward.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_LIST_Ward.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_LIST_Ward")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_LIST_Ward.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_LIST_Ward.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_LIST_Ward.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_LIST_Ward.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_LIST_Ward result = null;
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_LIST_Ward.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_LIST_Ward", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_LIST_Ward, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_LIST_Ward.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_LIST_Ward.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/MR/CompetiorOrder")]
    public partial class MR_CompetiorOrderController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_CompetiorOrder.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_CompetiorOrder.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("MR_CompetiorOrder_Template.xlsx", "MR_CompetiorOrder.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_CompetiorOrder.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_MR_CompetiorOrder")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_MR_CompetiorOrder.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_MR_CompetiorOrder.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_MR_CompetiorOrder.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_MR_CompetiorOrder.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_MR_CompetiorOrder result = null;
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_MR_CompetiorOrder.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_MR_CompetiorOrder", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_MR_CompetiorOrder, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_MR_CompetiorOrder.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_MR_CompetiorOrder.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/MR/TrackingCompetitor")]
    public partial class MR_TrackingCompetitorController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_TrackingCompetitor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_TrackingCompetitor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("MR_TrackingCompetitor_Template.xlsx", "MR_TrackingCompetitor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_MR_TrackingCompetitor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_MR_TrackingCompetitor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_MR_TrackingCompetitor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_MR_TrackingCompetitor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_MR_TrackingCompetitor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_MR_TrackingCompetitor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_MR_TrackingCompetitor result = null;
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_MR_TrackingCompetitor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_MR_TrackingCompetitor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_MR_TrackingCompetitor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_MR_TrackingCompetitor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_MR_TrackingCompetitor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/OST/Office")]
    public partial class OST_OfficeController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_Office.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_Office.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("OST_Office_Template.xlsx", "OST_Office.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_Office.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_OST_Office")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_OST_Office.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_OST_Office.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_OST_Office.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_OST_Office.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_OST_Office result = null;
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_OST_Office.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_OST_Office", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_OST_Office, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_OST_Office.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_OST_Office.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/OST/OfficeGate")]
    public partial class OST_OfficeGateController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_OfficeGate.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_OfficeGate.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("OST_OfficeGate_Template.xlsx", "OST_OfficeGate.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_OST_OfficeGate.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_OST_OfficeGate")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_OST_OfficeGate.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_OST_OfficeGate.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_OST_OfficeGate.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_OST_OfficeGate.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_OST_OfficeGate result = null;
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_OST_OfficeGate.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_OST_OfficeGate", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_OST_OfficeGate, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_OST_OfficeGate.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_OST_OfficeGate.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PM/Task")]
    public partial class PM_TaskController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PM_Task.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PM_Task.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PM_Task_Template.xlsx", "PM_Task.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PM_Task.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PM_Task")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PM_Task.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PM_Task.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PM_Task.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PM_Task.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PM_Task result = null;
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PM_Task.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PM_Task", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PM_Task, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PM_Task.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PM_Task.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PR/PromotionTracking")]
    public partial class PR_PromotionTrackingController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PR_PromotionTracking.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PR_PromotionTracking.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PR_PromotionTracking_Template.xlsx", "PR_PromotionTracking.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PR_PromotionTracking.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PR_PromotionTracking")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PR_PromotionTracking.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PR_PromotionTracking.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PR_PromotionTracking.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PR_PromotionTracking.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PR_PromotionTracking result = null;
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PR_PromotionTracking.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PR_PromotionTracking", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PR_PromotionTracking, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PR_PromotionTracking.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PR_PromotionTracking.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PROD/BillOfMaterials")]
    public partial class PROD_BillOfMaterialsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterials.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterials.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PROD_BillOfMaterials_Template.xlsx", "PROD_BillOfMaterials.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterials.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PROD_BillOfMaterials")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PROD_BillOfMaterials.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PROD_BillOfMaterials.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PROD_BillOfMaterials.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PROD_BillOfMaterials.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PROD_BillOfMaterials result = null;
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PROD_BillOfMaterials.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PROD_BillOfMaterials", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterials, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PROD_BillOfMaterials.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PROD_BillOfMaterials.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PROD/BillOfMaterialsDetail")]
    public partial class PROD_BillOfMaterialsDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterialsDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterialsDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PROD_BillOfMaterialsDetail_Template.xlsx", "PROD_BillOfMaterialsDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_BillOfMaterialsDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PROD_BillOfMaterialsDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PROD_BillOfMaterialsDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PROD_BillOfMaterialsDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PROD_BillOfMaterialsDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PROD_BillOfMaterialsDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PROD_BillOfMaterialsDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PROD_BillOfMaterialsDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PROD_BillOfMaterialsDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_BillOfMaterialsDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PROD_BillOfMaterialsDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PROD_BillOfMaterialsDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PROD/ItemInVendor")]
    public partial class PROD_ItemInVendorController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_ItemInVendor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_ItemInVendor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PROD_ItemInVendor_Template.xlsx", "PROD_ItemInVendor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_ItemInVendor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PROD_ItemInVendor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PROD_ItemInVendor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PROD_ItemInVendor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PROD_ItemInVendor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PROD_ItemInVendor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PROD_ItemInVendor result = null;
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PROD_ItemInVendor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PROD_ItemInVendor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_ItemInVendor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PROD_ItemInVendor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PROD_ItemInVendor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PROD/MRP")]
    public partial class PROD_MRPController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_MRP.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_MRP.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PROD_MRP_Template.xlsx", "PROD_MRP.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PROD_MRP.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PROD_MRP")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PROD_MRP.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PROD_MRP.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PROD_MRP.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PROD_MRP.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PROD_MRP result = null;
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PROD_MRP.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PROD_MRP", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PROD_MRP, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PROD_MRP.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PROD_MRP.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PURCHASE/Order")]
    public partial class PURCHASE_OrderController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_Order.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_Order.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PURCHASE_Order_Template.xlsx", "PURCHASE_Order.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_Order.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PURCHASE_Order")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PURCHASE_Order.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PURCHASE_Order.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PURCHASE_Order.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PURCHASE_Order.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PURCHASE_Order result = null;
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PURCHASE_Order.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PURCHASE_Order", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PURCHASE_Order.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PURCHASE_Order.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/PURCHASE/OrderDetail")]
    public partial class PURCHASE_OrderDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_OrderDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_OrderDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("PURCHASE_OrderDetail_Template.xlsx", "PURCHASE_OrderDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_PURCHASE_OrderDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_PURCHASE_OrderDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_PURCHASE_OrderDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_PURCHASE_OrderDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_PURCHASE_OrderDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_PURCHASE_OrderDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_PURCHASE_OrderDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_PURCHASE_OrderDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_PURCHASE_OrderDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_PURCHASE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_PURCHASE_OrderDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_PURCHASE_OrderDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SALE/Order")]
    public partial class SALE_OrderController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_Order.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_Order.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SALE_Order_Template.xlsx", "SALE_Order.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_Order.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SALE_Order")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SALE_Order.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SALE_Order.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SALE_Order.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SALE_Order.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SALE_Order result = null;
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SALE_Order.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SALE_Order", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SALE_Order, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SALE_Order.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SALE_Order.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SALE/OrderDetail")]
    public partial class SALE_OrderDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_OrderDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_OrderDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SALE_OrderDetail_Template.xlsx", "SALE_OrderDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SALE_OrderDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SALE_OrderDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SALE_OrderDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SALE_OrderDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SALE_OrderDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SALE_OrderDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SALE_OrderDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SALE_OrderDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SALE_OrderDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SALE_OrderDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SALE_OrderDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SALE_OrderDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SHIFT/TimeSheet")]
    public partial class SHIFT_TimeSheetController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIFT_TimeSheet.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIFT_TimeSheet.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SHIFT_TimeSheet_Template.xlsx", "SHIFT_TimeSheet.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIFT_TimeSheet.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SHIFT_TimeSheet")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SHIFT_TimeSheet.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SHIFT_TimeSheet.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SHIFT_TimeSheet.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SHIFT_TimeSheet.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SHIFT_TimeSheet result = null;
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SHIFT_TimeSheet.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SHIFT_TimeSheet", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIFT_TimeSheet, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SHIFT_TimeSheet.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SHIFT_TimeSheet.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SHIP/Shipment")]
    public partial class SHIP_ShipmentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Shipment.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Shipment.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SHIP_Shipment_Template.xlsx", "SHIP_Shipment.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Shipment.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SHIP_Shipment")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SHIP_Shipment.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SHIP_Shipment.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SHIP_Shipment.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SHIP_Shipment.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SHIP_Shipment result = null;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SHIP_Shipment.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SHIP_Shipment", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Shipment, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SHIP_Shipment.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SHIP_Shipment.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SHIP/ShipmentDebt")]
    public partial class SHIP_ShipmentDebtController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDebt.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDebt.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SHIP_ShipmentDebt_Template.xlsx", "SHIP_ShipmentDebt.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDebt.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SHIP_ShipmentDebt")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SHIP_ShipmentDebt.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SHIP_ShipmentDebt.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SHIP_ShipmentDebt.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SHIP_ShipmentDebt.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SHIP_ShipmentDebt result = null;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SHIP_ShipmentDebt.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SHIP_ShipmentDebt", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDebt, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SHIP_ShipmentDebt.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SHIP_ShipmentDebt.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SHIP/ShipmentDetail")]
    public partial class SHIP_ShipmentDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SHIP_ShipmentDetail_Template.xlsx", "SHIP_ShipmentDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_ShipmentDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SHIP_ShipmentDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SHIP_ShipmentDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SHIP_ShipmentDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SHIP_ShipmentDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SHIP_ShipmentDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SHIP_ShipmentDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SHIP_ShipmentDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SHIP_ShipmentDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_ShipmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SHIP_ShipmentDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SHIP_ShipmentDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SHIP/Vehicle")]
    public partial class SHIP_VehicleController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Vehicle.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Vehicle.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SHIP_Vehicle_Template.xlsx", "SHIP_Vehicle.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SHIP_Vehicle.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SHIP_Vehicle")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SHIP_Vehicle.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SHIP_Vehicle.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SHIP_Vehicle.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SHIP_Vehicle.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SHIP_Vehicle result = null;
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SHIP_Vehicle.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SHIP_Vehicle", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SHIP_Vehicle, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SHIP_Vehicle.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SHIP_Vehicle.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Apps")]
    public partial class SYS_AppsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Apps.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Apps.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Apps_Template.xlsx", "SYS_Apps.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Apps.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Apps")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Apps.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Apps.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Apps.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Apps.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Apps result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Apps.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Apps", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Apps, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Apps.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Apps.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Config")]
    public partial class SYS_ConfigController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Config.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Config.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Config_Template.xlsx", "SYS_Config.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Config.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Config")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Config.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Config.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Config.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Config.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Config result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Config.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Config", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Config, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Config.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Config.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/ConfigOption")]
    public partial class SYS_ConfigOptionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_ConfigOption.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_ConfigOption.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_ConfigOption_Template.xlsx", "SYS_ConfigOption.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_ConfigOption.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_ConfigOption")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_ConfigOption.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_ConfigOption.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_ConfigOption.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_ConfigOption.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_ConfigOption result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_ConfigOption.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_ConfigOption", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_ConfigOption, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_ConfigOption.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_ConfigOption.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Currency")]
    public partial class SYS_CurrencyController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Currency.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Currency.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Currency_Template.xlsx", "SYS_Currency.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Currency.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Currency")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Currency.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Currency.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Currency.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Currency.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Currency result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Currency.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Currency", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Currency, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Currency.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Currency.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/DataPermissionList")]
    public partial class SYS_DataPermissionListController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_DataPermissionList.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_DataPermissionList.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_DataPermissionList_Template.xlsx", "SYS_DataPermissionList.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_DataPermissionList.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_DataPermissionList")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_DataPermissionList.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_DataPermissionList.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_DataPermissionList.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_DataPermissionList.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_DataPermissionList result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_DataPermissionList.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_DataPermissionList", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_DataPermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_DataPermissionList.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_DataPermissionList.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Form")]
    public partial class SYS_FormController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Form.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Form.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Form_Template.xlsx", "SYS_Form.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Form.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Form")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Form.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Form.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Form.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Form.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Form result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Form.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Form", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Form, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Form.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Form.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/FormGroup")]
    public partial class SYS_FormGroupController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_FormGroup.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_FormGroup.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_FormGroup_Template.xlsx", "SYS_FormGroup.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_FormGroup.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_FormGroup")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_FormGroup.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_FormGroup.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_FormGroup.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_FormGroup.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_FormGroup result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_FormGroup.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_FormGroup", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_FormGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_FormGroup.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_FormGroup.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/GlobalConfig")]
    public partial class SYS_GlobalConfigController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_GlobalConfig.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_GlobalConfig.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_GlobalConfig_Template.xlsx", "SYS_GlobalConfig.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_GlobalConfig.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_GlobalConfig")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_GlobalConfig.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_GlobalConfig.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_GlobalConfig.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_GlobalConfig.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_GlobalConfig result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_GlobalConfig.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_GlobalConfig", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_GlobalConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_GlobalConfig.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_GlobalConfig.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Log")]
    public partial class SYS_LogController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Log.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Log.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Log_Template.xlsx", "SYS_Log.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Log.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Log")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Log.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Log.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Log.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Log.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Log result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Log.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Log", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Log, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Log.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Log.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/PermissionList")]
    public partial class SYS_PermissionListController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_PermissionList.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_PermissionList.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_PermissionList_Template.xlsx", "SYS_PermissionList.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_PermissionList.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_PermissionList")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_PermissionList.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_PermissionList.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_PermissionList.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_PermissionList.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_PermissionList result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_PermissionList.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_PermissionList", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_PermissionList, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_PermissionList.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_PermissionList.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Role")]
    public partial class SYS_RoleController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Role.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Role.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Role_Template.xlsx", "SYS_Role.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Role.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Role")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Role.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Role.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Role.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Role.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Role result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Role.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Role", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Role, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Role.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Role.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/RuningNo")]
    public partial class SYS_RuningNoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_RuningNo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_RuningNo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_RuningNo_Template.xlsx", "SYS_RuningNo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_RuningNo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_RuningNo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_RuningNo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_RuningNo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_RuningNo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_RuningNo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_RuningNo result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_RuningNo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_RuningNo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_RuningNo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_RuningNo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_RuningNo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/SAP/Databases")]
    public partial class SYS_SAP_DatabasesController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SAP_Databases.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SAP_Databases.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_SAP_Databases_Template.xlsx", "SYS_SAP_Databases.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SAP_Databases.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_SAP_Databases")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_SAP_Databases.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_SAP_Databases.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_SAP_Databases.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_SAP_Databases.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_SAP_Databases result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_SAP_Databases.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_SAP_Databases", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_SAP_Databases, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_SAP_Databases.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_SAP_Databases.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Status")]
    public partial class SYS_StatusController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Status.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Status.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Status_Template.xlsx", "SYS_Status.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Status.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Status")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Status.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Status.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Status.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Status.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Status result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Status.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Status", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Status, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Status.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Status.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/SyncJob")]
    public partial class SYS_SyncJobController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SyncJob.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SyncJob.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_SyncJob_Template.xlsx", "SYS_SyncJob.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_SyncJob.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_SyncJob")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_SyncJob.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_SyncJob.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_SyncJob.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_SyncJob.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_SyncJob result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_SyncJob.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_SyncJob", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_SyncJob, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_SyncJob.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_SyncJob.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/Type")]
    public partial class SYS_TypeController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Type.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Type.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_Type_Template.xlsx", "SYS_Type.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_Type.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_Type")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_Type.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_Type.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_Type.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_Type.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_Type result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_Type.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_Type", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_Type, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_Type.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_Type.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/UserDevice")]
    public partial class SYS_UserDeviceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserDevice.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserDevice.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_UserDevice_Template.xlsx", "SYS_UserDevice.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserDevice.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_UserDevice")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_UserDevice.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_UserDevice.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_UserDevice.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_UserDevice.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_UserDevice result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_UserDevice.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_UserDevice", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserDevice, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_UserDevice.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_UserDevice.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/UserSetting")]
    public partial class SYS_UserSettingController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserSetting.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserSetting.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_UserSetting_Template.xlsx", "SYS_UserSetting.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserSetting.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_UserSetting")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_UserSetting.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_UserSetting.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_UserSetting.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_UserSetting.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_UserSetting result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_UserSetting.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_UserSetting", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserSetting, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_UserSetting.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_UserSetting.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/UserVoice")]
    public partial class SYS_UserVoiceController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserVoice.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserVoice.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_UserVoice_Template.xlsx", "SYS_UserVoice.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_UserVoice.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_UserVoice")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_UserVoice.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_UserVoice.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_UserVoice.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_UserVoice.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_UserVoice result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_UserVoice.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_UserVoice", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_UserVoice, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_UserVoice.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_UserVoice.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/SYS/VeifyPhoneNumber")]
    public partial class SYS_VeifyPhoneNumberController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_VeifyPhoneNumber.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_VeifyPhoneNumber.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("SYS_VeifyPhoneNumber_Template.xlsx", "SYS_VeifyPhoneNumber.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_SYS_VeifyPhoneNumber.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_SYS_VeifyPhoneNumber")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_SYS_VeifyPhoneNumber.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_SYS_VeifyPhoneNumber.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_SYS_VeifyPhoneNumber.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_SYS_VeifyPhoneNumber.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_SYS_VeifyPhoneNumber result = null;
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_SYS_VeifyPhoneNumber.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_SYS_VeifyPhoneNumber", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_SYS_VeifyPhoneNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_SYS_VeifyPhoneNumber.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_SYS_VeifyPhoneNumber.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/Version")]
    public partial class VersionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_Version.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_Version.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("Version_Template.xlsx", "Version.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_Version.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_Version")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_Version.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_Version.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_Version.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_Version.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_Version result = null;
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_Version.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_Version", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_Version, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_Version.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_Version.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WEB/Category")]
    public partial class WEB_CategoryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Category.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Category.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WEB_Category_Template.xlsx", "WEB_Category.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Category.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WEB_Category")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WEB_Category.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WEB_Category.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WEB_Category.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WEB_Category.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WEB_Category result = null;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WEB_Category.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WEB_Category", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Category, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WEB_Category.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WEB_Category.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WEB/Content")]
    public partial class WEB_ContentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WEB_Content_Template.xlsx", "WEB_Content.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WEB_Content")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WEB_Content.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WEB_Content.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WEB_Content.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WEB_Content.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WEB_Content result = null;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WEB_Content.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WEB_Content", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WEB_Content.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WEB_Content.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WEB/Content/Tag")]
    public partial class WEB_Content_TagController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content_Tag.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content_Tag.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WEB_Content_Tag_Template.xlsx", "WEB_Content_Tag.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Content_Tag.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WEB_Content_Tag")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WEB_Content_Tag.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WEB_Content_Tag.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WEB_Content_Tag.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WEB_Content_Tag.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WEB_Content_Tag result = null;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WEB_Content_Tag.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WEB_Content_Tag", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Content_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WEB_Content_Tag.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WEB_Content_Tag.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WEB/ContentInCategory")]
    public partial class WEB_ContentInCategoryController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_ContentInCategory.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_ContentInCategory.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WEB_ContentInCategory_Template.xlsx", "WEB_ContentInCategory.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_ContentInCategory.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WEB_ContentInCategory")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WEB_ContentInCategory.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WEB_ContentInCategory.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WEB_ContentInCategory.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WEB_ContentInCategory.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WEB_ContentInCategory result = null;
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WEB_ContentInCategory.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WEB_ContentInCategory", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_ContentInCategory, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WEB_ContentInCategory.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WEB_ContentInCategory.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WEB/Tag")]
    public partial class WEB_TagController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Tag.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Tag.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WEB_Tag_Template.xlsx", "WEB_Tag.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WEB_Tag.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WEB_Tag")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WEB_Tag.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WEB_Tag.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WEB_Tag.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WEB_Tag.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WEB_Tag result = null;
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WEB_Tag.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WEB_Tag", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WEB_Tag, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WEB_Tag.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WEB_Tag.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/Branches")]
    public partial class WH_BranchesController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Branches.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Branches.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_Branches_Template.xlsx", "WH_Branches.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Branches.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_Branches")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_Branches.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_Branches.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_Branches.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_Branches.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_Branches result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_Branches.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_Branches", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Branches, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_Branches.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_Branches.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/CashFlows")]
    public partial class WH_CashFlowsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_CashFlows.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_CashFlows.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_CashFlows_Template.xlsx", "WH_CashFlows.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_CashFlows.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_CashFlows")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_CashFlows.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_CashFlows.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_CashFlows.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_CashFlows.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_CashFlows result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_CashFlows.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_CashFlows", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_CashFlows, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_CashFlows.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_CashFlows.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/ContactGroups")]
    public partial class WH_ContactGroupsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ContactGroups.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ContactGroups.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_ContactGroups_Template.xlsx", "WH_ContactGroups.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ContactGroups.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_ContactGroups")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_ContactGroups.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_ContactGroups.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_ContactGroups.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_ContactGroups.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_ContactGroups result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_ContactGroups.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_ContactGroups", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ContactGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_ContactGroups.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_ContactGroups.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/Contacts")]
    public partial class WH_ContactsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Contacts.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Contacts.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_Contacts_Template.xlsx", "WH_Contacts.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Contacts.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_Contacts")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_Contacts.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_Contacts.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_Contacts.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_Contacts.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_Contacts result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_Contacts.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_Contacts", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Contacts, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_Contacts.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_Contacts.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/GeneralLedgers")]
    public partial class WH_GeneralLedgersController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_GeneralLedgers.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_GeneralLedgers.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_GeneralLedgers_Template.xlsx", "WH_GeneralLedgers.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_GeneralLedgers.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_GeneralLedgers")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_GeneralLedgers.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_GeneralLedgers.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_GeneralLedgers.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_GeneralLedgers.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_GeneralLedgers result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_GeneralLedgers.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_GeneralLedgers", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_GeneralLedgers, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_GeneralLedgers.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_GeneralLedgers.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/Invoices")]
    public partial class WH_InvoicesController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Invoices.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Invoices.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_Invoices_Template.xlsx", "WH_Invoices.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Invoices.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_Invoices")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_Invoices.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_Invoices.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_Invoices.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_Invoices.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_Invoices result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_Invoices.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_Invoices", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Invoices, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_Invoices.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_Invoices.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/ItemGroups")]
    public partial class WH_ItemGroupsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemGroups.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemGroups.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_ItemGroups_Template.xlsx", "WH_ItemGroups.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemGroups.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_ItemGroups")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_ItemGroups.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_ItemGroups.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_ItemGroups.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_ItemGroups.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_ItemGroups result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_ItemGroups.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_ItemGroups", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemGroups, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_ItemGroups.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_ItemGroups.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/ItemPriceLists")]
    public partial class WH_ItemPriceListsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemPriceLists.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemPriceLists.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_ItemPriceLists_Template.xlsx", "WH_ItemPriceLists.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemPriceLists.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_ItemPriceLists")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_ItemPriceLists.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_ItemPriceLists.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_ItemPriceLists.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_ItemPriceLists.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_ItemPriceLists result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_ItemPriceLists.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_ItemPriceLists", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemPriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_ItemPriceLists.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_ItemPriceLists.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/Items")]
    public partial class WH_ItemsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Items.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Items.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_Items_Template.xlsx", "WH_Items.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Items.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_Items")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_Items.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_Items.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_Items.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_Items.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_Items result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_Items.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_Items", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Items, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_Items.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_Items.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/ItemUoM")]
    public partial class WH_ItemUoMController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemUoM.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemUoM.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_ItemUoM_Template.xlsx", "WH_ItemUoM.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_ItemUoM.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_ItemUoM")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_ItemUoM.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_ItemUoM.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_ItemUoM.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_ItemUoM.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_ItemUoM result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_ItemUoM.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_ItemUoM", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_ItemUoM.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_ItemUoM.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/JournalEntries")]
    public partial class WH_JournalEntriesController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntries.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntries.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_JournalEntries_Template.xlsx", "WH_JournalEntries.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntries.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_JournalEntries")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_JournalEntries.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_JournalEntries.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_JournalEntries.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_JournalEntries.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_JournalEntries result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_JournalEntries.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_JournalEntries", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntries, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_JournalEntries.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_JournalEntries.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/JournalEntryRows")]
    public partial class WH_JournalEntryRowsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntryRows.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntryRows.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_JournalEntryRows_Template.xlsx", "WH_JournalEntryRows.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_JournalEntryRows.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_JournalEntryRows")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_JournalEntryRows.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_JournalEntryRows.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_JournalEntryRows.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_JournalEntryRows.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_JournalEntryRows result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_JournalEntryRows.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_JournalEntryRows", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_JournalEntryRows, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_JournalEntryRows.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_JournalEntryRows.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/PostingPeriods")]
    public partial class WH_PostingPeriodsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PostingPeriods.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PostingPeriods.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_PostingPeriods_Template.xlsx", "WH_PostingPeriods.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PostingPeriods.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_PostingPeriods")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_PostingPeriods.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_PostingPeriods.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_PostingPeriods.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_PostingPeriods.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_PostingPeriods result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_PostingPeriods.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_PostingPeriods", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_PostingPeriods, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_PostingPeriods.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_PostingPeriods.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/PriceLists")]
    public partial class WH_PriceListsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PriceLists.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PriceLists.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_PriceLists_Template.xlsx", "WH_PriceLists.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_PriceLists.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_PriceLists")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_PriceLists.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_PriceLists.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_PriceLists.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_PriceLists.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_PriceLists result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_PriceLists.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_PriceLists", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_PriceLists, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_PriceLists.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_PriceLists.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/Staff")]
    public partial class WH_StaffController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Staff.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Staff.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_Staff_Template.xlsx", "WH_Staff.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_Staff.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_Staff")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_Staff.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_Staff.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_Staff.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_Staff.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_Staff result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_Staff.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_Staff", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_Staff, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_Staff.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_Staff.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/UoM")]
    public partial class WH_UoMController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_UoM.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_UoM.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_UoM_Template.xlsx", "WH_UoM.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_UoM.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_UoM")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_UoM.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_UoM.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_UoM.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_UoM.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_UoM result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_UoM.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_UoM", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_UoM.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_UoM.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WH/VTB/Statements")]
    public partial class WH_VTB_StatementsController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_VTB_Statements.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_VTB_Statements.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WH_VTB_Statements_Template.xlsx", "WH_VTB_Statements.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WH_VTB_Statements.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WH_VTB_Statements")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WH_VTB_Statements.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WH_VTB_Statements.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WH_VTB_Statements.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WH_VTB_Statements.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WH_VTB_Statements result = null;
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WH_VTB_Statements.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WH_VTB_Statements", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WH_VTB_Statements, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WH_VTB_Statements.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WH_VTB_Statements.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Adjustment")]
    public partial class WMS_AdjustmentController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Adjustment.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Adjustment.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Adjustment_Template.xlsx", "WMS_Adjustment.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Adjustment.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Adjustment")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Adjustment.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Adjustment.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Adjustment.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Adjustment.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Adjustment result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Adjustment.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Adjustment", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Adjustment, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Adjustment.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Adjustment.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/AdjustmentDetail")]
    public partial class WMS_AdjustmentDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_AdjustmentDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_AdjustmentDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_AdjustmentDetail_Template.xlsx", "WMS_AdjustmentDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_AdjustmentDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_AdjustmentDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_AdjustmentDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_AdjustmentDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_AdjustmentDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_AdjustmentDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_AdjustmentDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_AdjustmentDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_AdjustmentDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_AdjustmentDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_AdjustmentDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_AdjustmentDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Carrier")]
    public partial class WMS_CarrierController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carrier.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carrier.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Carrier_Template.xlsx", "WMS_Carrier.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carrier.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Carrier")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Carrier.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Carrier.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Carrier.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Carrier.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Carrier result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Carrier.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Carrier", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carrier, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Carrier.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Carrier.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Carton")]
    public partial class WMS_CartonController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carton.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carton.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Carton_Template.xlsx", "WMS_Carton.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Carton.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Carton")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Carton.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Carton.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Carton.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Carton.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Carton result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Carton.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Carton", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Carton, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Carton.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Carton.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/CartonGroup")]
    public partial class WMS_CartonGroupController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_CartonGroup.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_CartonGroup.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_CartonGroup_Template.xlsx", "WMS_CartonGroup.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_CartonGroup.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_CartonGroup")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_CartonGroup.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_CartonGroup.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_CartonGroup.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_CartonGroup.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_CartonGroup result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_CartonGroup.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_CartonGroup", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_CartonGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_CartonGroup.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_CartonGroup.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Item")]
    public partial class WMS_ItemController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Item.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Item.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Item_Template.xlsx", "WMS_Item.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Item.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Item")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Item.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Item.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Item.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Item.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Item result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Item.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Item", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Item, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Item.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Item.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ItemGroup")]
    public partial class WMS_ItemGroupController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemGroup.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemGroup.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ItemGroup_Template.xlsx", "WMS_ItemGroup.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemGroup.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ItemGroup")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ItemGroup.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ItemGroup.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ItemGroup.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ItemGroup.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ItemGroup result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ItemGroup.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ItemGroup", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ItemGroup.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ItemGroup.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ItemInLocation")]
    public partial class WMS_ItemInLocationController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInLocation.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInLocation.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ItemInLocation_Template.xlsx", "WMS_ItemInLocation.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInLocation.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ItemInLocation")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ItemInLocation.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ItemInLocation.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ItemInLocation.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ItemInLocation.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ItemInLocation result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ItemInLocation.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ItemInLocation", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ItemInLocation.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ItemInLocation.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ItemInWarehouseConfig")]
    public partial class WMS_ItemInWarehouseConfigController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInWarehouseConfig.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInWarehouseConfig.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ItemInWarehouseConfig_Template.xlsx", "WMS_ItemInWarehouseConfig.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemInWarehouseConfig.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ItemInWarehouseConfig")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ItemInWarehouseConfig.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ItemInWarehouseConfig.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ItemInWarehouseConfig.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ItemInWarehouseConfig.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ItemInWarehouseConfig result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ItemInWarehouseConfig.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ItemInWarehouseConfig", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemInWarehouseConfig, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ItemInWarehouseConfig.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ItemInWarehouseConfig.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ItemUoM")]
    public partial class WMS_ItemUoMController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemUoM.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemUoM.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ItemUoM_Template.xlsx", "WMS_ItemUoM.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ItemUoM.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ItemUoM")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ItemUoM.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ItemUoM.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ItemUoM.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ItemUoM.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ItemUoM result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ItemUoM.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ItemUoM", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ItemUoM, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ItemUoM.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ItemUoM.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/LicencePlateNumber")]
    public partial class WMS_LicencePlateNumberController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LicencePlateNumber.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LicencePlateNumber.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_LicencePlateNumber_Template.xlsx", "WMS_LicencePlateNumber.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LicencePlateNumber.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_LicencePlateNumber")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_LicencePlateNumber.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_LicencePlateNumber.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_LicencePlateNumber.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_LicencePlateNumber.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_LicencePlateNumber result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_LicencePlateNumber.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_LicencePlateNumber", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LicencePlateNumber, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_LicencePlateNumber.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_LicencePlateNumber.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Location")]
    public partial class WMS_LocationController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Location.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Location.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Location_Template.xlsx", "WMS_Location.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Location.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Location")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Location.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Location.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Location.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Location.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Location result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Location.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Location", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Location, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Location.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Location.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Lot")]
    public partial class WMS_LotController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Lot.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Lot.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Lot_Template.xlsx", "WMS_Lot.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Lot.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Lot")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Lot.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Lot.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Lot.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Lot.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Lot result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Lot.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Lot", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Lot, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Lot.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Lot.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/LotAttribute")]
    public partial class WMS_LotAttributeController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotAttribute.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotAttribute.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_LotAttribute_Template.xlsx", "WMS_LotAttribute.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotAttribute.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_LotAttribute")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_LotAttribute.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_LotAttribute.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_LotAttribute.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_LotAttribute.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_LotAttribute result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_LotAttribute.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_LotAttribute", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotAttribute, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_LotAttribute.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_LotAttribute.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/LotLPNLocation")]
    public partial class WMS_LotLPNLocationController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotLPNLocation.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotLPNLocation.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_LotLPNLocation_Template.xlsx", "WMS_LotLPNLocation.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_LotLPNLocation.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_LotLPNLocation")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_LotLPNLocation.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_LotLPNLocation.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_LotLPNLocation.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_LotLPNLocation.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_LotLPNLocation result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_LotLPNLocation.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_LotLPNLocation", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_LotLPNLocation, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_LotLPNLocation.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_LotLPNLocation.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PriceList")]
    public partial class WMS_PriceListController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceList.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceList.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PriceList_Template.xlsx", "WMS_PriceList.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceList.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PriceList")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PriceList.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PriceList.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PriceList.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PriceList.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PriceList result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PriceList.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PriceList", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceList, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PriceList.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PriceList.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PriceListDetail")]
    public partial class WMS_PriceListDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PriceListDetail_Template.xlsx", "WMS_PriceListDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PriceListDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PriceListDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PriceListDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PriceListDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PriceListDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PriceListDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PriceListDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PriceListDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PriceListDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PriceListDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PriceListVersion")]
    public partial class WMS_PriceListVersionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersion.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersion.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PriceListVersion_Template.xlsx", "WMS_PriceListVersion.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersion.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PriceListVersion")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PriceListVersion.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PriceListVersion.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PriceListVersion.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PriceListVersion.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PriceListVersion result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PriceListVersion.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PriceListVersion", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersion, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PriceListVersion.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PriceListVersion.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PriceListVersionDetail")]
    public partial class WMS_PriceListVersionDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersionDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersionDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PriceListVersionDetail_Template.xlsx", "WMS_PriceListVersionDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PriceListVersionDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PriceListVersionDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PriceListVersionDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PriceListVersionDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PriceListVersionDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PriceListVersionDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PriceListVersionDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PriceListVersionDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PriceListVersionDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PriceListVersionDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PriceListVersionDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PriceListVersionDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PutawayStrategy")]
    public partial class WMS_PutawayStrategyController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategy.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategy.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PutawayStrategy_Template.xlsx", "WMS_PutawayStrategy.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategy.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PutawayStrategy")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PutawayStrategy.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PutawayStrategy.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PutawayStrategy.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PutawayStrategy.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PutawayStrategy result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PutawayStrategy.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PutawayStrategy", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PutawayStrategy.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PutawayStrategy.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/PutawayStrategyDetail")]
    public partial class WMS_PutawayStrategyDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategyDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategyDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_PutawayStrategyDetail_Template.xlsx", "WMS_PutawayStrategyDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_PutawayStrategyDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_PutawayStrategyDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_PutawayStrategyDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_PutawayStrategyDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_PutawayStrategyDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_PutawayStrategyDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_PutawayStrategyDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_PutawayStrategyDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_PutawayStrategyDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_PutawayStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_PutawayStrategyDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_PutawayStrategyDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Receipt")]
    public partial class WMS_ReceiptController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Receipt.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Receipt.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Receipt_Template.xlsx", "WMS_Receipt.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Receipt.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Receipt")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Receipt.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Receipt.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Receipt.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Receipt.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Receipt result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Receipt.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Receipt", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Receipt, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Receipt.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Receipt.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ReceiptDetail")]
    public partial class WMS_ReceiptDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ReceiptDetail_Template.xlsx", "WMS_ReceiptDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ReceiptDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ReceiptDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ReceiptDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ReceiptDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ReceiptDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ReceiptDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ReceiptDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ReceiptDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ReceiptDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ReceiptDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/ReceiptPalletization")]
    public partial class WMS_ReceiptPalletizationController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptPalletization.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptPalletization.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_ReceiptPalletization_Template.xlsx", "WMS_ReceiptPalletization.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_ReceiptPalletization.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_ReceiptPalletization")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_ReceiptPalletization.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_ReceiptPalletization.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_ReceiptPalletization.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_ReceiptPalletization.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_ReceiptPalletization result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_ReceiptPalletization.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_ReceiptPalletization", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_ReceiptPalletization, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_ReceiptPalletization.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_ReceiptPalletization.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Storer")]
    public partial class WMS_StorerController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Storer.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Storer.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Storer_Template.xlsx", "WMS_Storer.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Storer.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Storer")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Storer.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Storer.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Storer.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Storer.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Storer result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Storer.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Storer", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Storer, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Storer.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Storer.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/TaskDispatchStrategy")]
    public partial class WMS_TaskDispatchStrategyController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategy.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategy.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_TaskDispatchStrategy_Template.xlsx", "WMS_TaskDispatchStrategy.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategy.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_TaskDispatchStrategy")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_TaskDispatchStrategy.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_TaskDispatchStrategy.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_TaskDispatchStrategy.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_TaskDispatchStrategy.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_TaskDispatchStrategy result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_TaskDispatchStrategy.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_TaskDispatchStrategy", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategy, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_TaskDispatchStrategy.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_TaskDispatchStrategy.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/TaskDispatchStrategyDetail")]
    public partial class WMS_TaskDispatchStrategyDetailController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategyDetail.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategyDetail.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_TaskDispatchStrategyDetail_Template.xlsx", "WMS_TaskDispatchStrategyDetail.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_TaskDispatchStrategyDetail.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_TaskDispatchStrategyDetail")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_TaskDispatchStrategyDetail.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_TaskDispatchStrategyDetail.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_TaskDispatchStrategyDetail.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_TaskDispatchStrategyDetail.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_TaskDispatchStrategyDetail result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_TaskDispatchStrategyDetail.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_TaskDispatchStrategyDetail", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_TaskDispatchStrategyDetail, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_TaskDispatchStrategyDetail.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_TaskDispatchStrategyDetail.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Transaction")]
    public partial class WMS_TransactionController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Transaction.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Transaction.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Transaction_Template.xlsx", "WMS_Transaction.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Transaction.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Transaction")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Transaction.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Transaction.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Transaction.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Transaction.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Transaction result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Transaction.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Transaction", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Transaction, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Transaction.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Transaction.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/UoM")]
    public partial class WMS_UoMController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoM.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoM.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_UoM_Template.xlsx", "WMS_UoM.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoM.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_UoM")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_UoM.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_UoM.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_UoM.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_UoM.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_UoM result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_UoM.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_UoM", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoM, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_UoM.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_UoM.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/UoMGroup")]
    public partial class WMS_UoMGroupController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoMGroup.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoMGroup.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_UoMGroup_Template.xlsx", "WMS_UoMGroup.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_UoMGroup.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_UoMGroup")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_UoMGroup.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_UoMGroup.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_UoMGroup.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_UoMGroup.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_UoMGroup result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_UoMGroup.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_UoMGroup", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_UoMGroup, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_UoMGroup.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_UoMGroup.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Vendor")]
    public partial class WMS_VendorController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Vendor.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Vendor.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Vendor_Template.xlsx", "WMS_Vendor.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Vendor.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Vendor")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Vendor.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Vendor.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Vendor.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Vendor.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Vendor result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Vendor.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Vendor", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Vendor, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Vendor.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Vendor.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/WarehouseInfo")]
    public partial class WMS_WarehouseInfoController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WarehouseInfo.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WarehouseInfo.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_WarehouseInfo_Template.xlsx", "WMS_WarehouseInfo.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WarehouseInfo.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_WarehouseInfo")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_WarehouseInfo.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_WarehouseInfo.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_WarehouseInfo.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_WarehouseInfo.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_WarehouseInfo result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_WarehouseInfo.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_WarehouseInfo", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_WarehouseInfo, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_WarehouseInfo.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_WarehouseInfo.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/WavePlanning")]
    public partial class WMS_WavePlanningController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WavePlanning.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WavePlanning.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_WavePlanning_Template.xlsx", "WMS_WavePlanning.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_WavePlanning.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_WavePlanning")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_WavePlanning.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_WavePlanning.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_WavePlanning.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_WavePlanning.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_WavePlanning result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_WavePlanning.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_WavePlanning", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_WavePlanning, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_WavePlanning.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_WavePlanning.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }

    [RoutePrefix("api/v1/WMS/Zone")]
    public partial class WMS_ZoneController : CustomApiController
    {
        [Route("")]
        public IHttpActionResult Get()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("getCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Zone.get(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Search")]
        public IHttpActionResult GetSearch()
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("getSearchCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Zone.getSearch(db, IDBranch, StaffID, QueryStrings));
        }

        [Route("Export")]
        public IHttpActionResult Get_Export()
        {
            var package = GetTemplateWorkbook("WMS_Zone_Template.xlsx", "WMS_Zone.xlsx", out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("exportCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings }));
            else
                return Ok(BS_WMS_Zone.export(package, db, IDBranch, StaffID, QueryStrings));
        }

        [Route("{id:int}", Name = "get_WMS_Zone")]
        public IHttpActionResult Get(int id)
        {
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("getAnItemCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id }));
            else
                return Ok(BS_WMS_Zone.getAnItem(db, IDBranch, StaffID, id));
			
        }

		[Route("{id:int}")]
        [ResponseType(typeof(void))]
        public IHttpActionResult Put(int id, dynamic item)
        {
            Nullable<bool> result = false;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("putCustom");
            
            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, id, item, Username, QueryStrings }));
            else
                result = BS_WMS_Zone.put(db, IDBranch, StaffID, id, item, Username, QueryStrings);
			
			if (result.GetValueOrDefault())
                return StatusCode(HttpStatusCode.NoContent);
            else
                return NotFound();
        }

        [HttpPut]
        [Route("Disable/{id}")]
        public IHttpActionResult PutDisable(string id)
        {   
            bool result = BS_WMS_Zone.disable(db, id, true, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [HttpPut]
        [Route("Enable/{id}")]
        public IHttpActionResult PutEnable(string id)
        {   
            bool result = BS_WMS_Zone.disable(db, id, false, Username); 
            
			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }

        [Route("")]
        public IHttpActionResult Post(dynamic item)
        {
            DTO_WMS_Zone result = null;
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("postCustom");

            if (method != null)
                return Ok(method.Invoke(this, new object[] { db, IDBranch, StaffID, item, Username }));
            else
                result = BS_WMS_Zone.post(db, IDBranch, StaffID, item, Username);
			
			if (result != null)
                return CreatedAtRoute("get_WMS_Zone", new { id = result.Id }, result);
            
            return Conflict();
        }

        [Route("Import")]
        public IHttpActionResult PostImport()
        {
            var package = SaveImportedFile(out string fileurl);
            Type type = Type.GetType("BaseBusiness.BS_WMS_Zone, ClassLibrary");
            MethodInfo method = type.GetMethod("importCustom");
            if (method != null)
                return Ok(method.Invoke(this, new object[] { package, db, IDBranch, StaffID, QueryStrings, Username }));
            else
                return Ok(BS_WMS_Zone.import(package, db, IDBranch, StaffID, QueryStrings, Username));
        }

        [Route("{ids}")]
        public IHttpActionResult Delete(string ids)
        {
            bool result = BS_WMS_Zone.delete(db, ids, Username); 

			if(result)
				return StatusCode(HttpStatusCode.NoContent);
			
			return Conflict();
        }
    }


};


