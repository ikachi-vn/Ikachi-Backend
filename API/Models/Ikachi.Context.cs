//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class eHospitalNDCEntities : DbContext
    {
        public eHospitalNDCEntities()
            : base("name=eHospitalNDCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<API_Branches> API_Branches { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<tblAL_Introducer> tblAL_Introducer { get; set; }
        public virtual DbSet<tblSC_Appointment> tblSC_Appointment { get; set; }
        public virtual DbSet<tblSC_AppointmentStatus> tblSC_AppointmentStatus { get; set; }
        public virtual DbSet<tblSC_Location> tblSC_Location { get; set; }
        public virtual DbSet<tblSC_Service> tblSC_Service { get; set; }
        public virtual DbSet<tblSC_Subject> tblSC_Subject { get; set; }
        public virtual DbSet<vwSC_Resources> vwSC_Resources { get; set; }
        public virtual DbSet<tblSC_MemoTemplate> tblSC_MemoTemplate { get; set; }
        public virtual DbSet<tblUT_Approval> tblUT_Approval { get; set; }
    
        public virtual ObjectResult<st_rptAppointmentList_Result> st_rptAppointmentList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_rptAppointmentList_Result>("st_rptAppointmentList", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<st_rptGroupSaleInvoice_Result> st_rptGroupSaleInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_rptGroupSaleInvoice_Result>("st_rptGroupSaleInvoice", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<st_rptGroupService_Result> st_rptGroupService(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_rptGroupService_Result>("st_rptGroupService", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<st_SearchPatient_Result> st_SearchPatient(Nullable<long> patientID, string phone, string fullName)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_SearchPatient_Result>("st_SearchPatient", patientIDParameter, phoneParameter, fullNameParameter);
        }
    
        public virtual ObjectResult<st_web_ApprovalProcess_Result> st_web_ApprovalProcess(Nullable<int> iD, Nullable<int> actionType, string approvedBy, string approveNote)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approveNoteParameter = approveNote != null ?
                new ObjectParameter("ApproveNote", approveNote) :
                new ObjectParameter("ApproveNote", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_web_ApprovalProcess_Result>("st_web_ApprovalProcess", iDParameter, actionTypeParameter, approvedByParameter, approveNoteParameter);
        }
    
        public virtual int st_web_ChangePassAppOnly(string userName, string newPassword, ObjectParameter @return)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_web_ChangePassAppOnly", userNameParameter, newPasswordParameter, @return);
        }
    
        public virtual ObjectResult<st_web_rptAppointmentList_Result> st_web_rptAppointmentList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_web_rptAppointmentList_Result>("st_web_rptAppointmentList", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual int st_web_rptGroupSaleInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_web_rptGroupSaleInvoice", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<st_web_rptGroupService_Result> st_web_rptGroupService(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_web_rptGroupService_Result>("st_web_rptGroupService", fromDateParameter, toDateParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<st_web_SearchPatient_Result> st_web_SearchPatient(Nullable<long> patientID, string phone, string fullName)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_web_SearchPatient_Result>("st_web_SearchPatient", patientIDParameter, phoneParameter, fullNameParameter);
        }
    }
}
